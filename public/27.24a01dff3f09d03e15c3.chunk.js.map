{"version":3,"sources":["webpack:///./src/helpers/compareVersion.ts","webpack:///./src/lib/appManagers/appStateManager.ts"],"names":["compareVersion","v1","v2","split","s1","s2","i","length","STATE_VERSION","version","BUILD","build","STATE_INIT","allDialogsLoaded","pinnedOrders","contactsList","updates","filters","maxSeenMsgId","stateCreatedTime","Date","now","recentEmoji","topPeersCache","recentSearch","authState","_","hiddenPinnedMessages","settings","messagesTextSize","sendShortcut","animationsEnabled","autoDownload","contacts","private","groups","channels","autoPlay","gifs","videos","stickers","suggest","loop","emoji","big","themes","name","background","type","blur","slug","highlightningColor","color","theme","notifications","sound","timeFormat","toLocaleString","match","keepSigned","chatContextMenuHintWasShown","stateId","ALL_KEYS","Object","keys","REFRESH_KEYS","super","log","logger","neededPeers","Map","singlePeerMap","storages","users","chats","dialogs","storagesResults","storage","stateStorage","this","loadSavedState","loaded","console","time","Promise","resolve","storagesKeys","storagesPromises","map","key","getAll","promises","get","concat","sessionStorage","all","then","arr","state","value","undefined","pushToState","splice","auth","shift","shiftedWebKAuth","push","values","dcID","baseDcId","date","id","toPeerId","obj","forEach","idx","set","rootScope","dispatchEvent","preserve","state_id","s","r","hasOwnProperty","nightTheme","find","t","missingKey","result","newVersion","timeEnd","catch","first","direct","setKeyValueToStorage","peerId","limit","has","Set","add","keepPeerSingle","keepPeerIdSingle","requestPeer","existsPeerId","delete","size","appStateManager"],"mappings":"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","file":"27.24a01dff3f09d03e15c3.chunk.js","sourcesContent":["export default function compareVersion(v1: string, v2: string): number {\n  v1 = v1.split(' ', 1)[0];\n  v2 = v2.split(' ', 1)[0];\n  const s1 = v1.split('.');\n  const s2 = v2.split('.');\n\n  for(let i = 0; i < s1.length; ++i) {\n    const v1 = +s1[i];\n    const v2 = +s2[i];\n    if(v1 > v2) return 1;\n    else if(v1 < v2) return -1;\n  }\n\n  return 0;\n}\n","/*\n * https://github.com/morethanwords/tweb\n * Copyright (C) 2019-2021 Eduard Kuzmenko\n * https://github.com/morethanwords/tweb/blob/master/LICENSE\n */\n\nimport type { Dialog } from './appMessagesManager';\nimport { NULL_PEER_ID, UserAuth } from '../mtproto/mtproto_config';\nimport type { MyTopPeer, TopPeerType, User } from './appUsersManager';\nimport type { AuthState } from '../../types';\nimport type FiltersStorage from '../storages/filters';\nimport type DialogsStorage from '../storages/dialogs';\nimport EventListenerBase from '../../helpers/eventListenerBase';\nimport rootScope from '../rootScope';\nimport stateStorage from '../stateStorage';\nimport { logger } from '../logger';\nimport { copy, setDeepProperty, validateInitObject } from '../../helpers/object';\nimport App from '../../config/app';\nimport DEBUG, { MOUNT_CLASS_TO } from '../../config/debug';\nimport AppStorage from '../storage';\nimport { Chat } from '../../layer';\nimport { IS_MOBILE } from '../../environment/userAgent';\nimport DATABASE_STATE from '../../config/databases/state';\nimport sessionStorage from '../sessionStorage';\nimport { nextRandomUint } from '../../helpers/random';\nimport compareVersion from '../../helpers/compareVersion';\n\nconst REFRESH_EVERY = 24 * 60 * 60 * 1000; // 1 day\n// const REFRESH_EVERY = 1e3;\n//const REFRESH_EVERY_WEEK = 24 * 60 * 60 * 1000 * 7; // 7 days\nconst STATE_VERSION = App.version;\nconst BUILD = App.build;\n\nexport type Background = {\n  type: 'color' | 'image' | 'default',\n  blur: boolean,\n  highlightningColor?: string,\n  color?: string,\n  slug?: string,\n};\n\nexport type Theme = {\n  name: 'day' | 'night' | 'system',\n  background: Background\n};\n\nexport type State = {\n  allDialogsLoaded: DialogsStorage['allDialogsLoaded'],\n  pinnedOrders: DialogsStorage['pinnedOrders'],\n  contactsList: UserId[],\n  updates: Partial<{\n    seq: number,\n    pts: number,\n    date: number\n  }>,\n  filters: FiltersStorage['filters'],\n  maxSeenMsgId: number,\n  stateCreatedTime: number,\n  recentEmoji: string[],\n  topPeersCache: {\n    [type in TopPeerType]?: {\n      peers: MyTopPeer[],\n      cachedTime: number\n    }\n  },\n  recentSearch: PeerId[],\n  version: typeof STATE_VERSION,\n  build: typeof BUILD,\n  authState: AuthState,\n  hiddenPinnedMessages: {[peerId: PeerId]: number},\n  settings: {\n    messagesTextSize: number,\n    sendShortcut: 'enter' | 'ctrlEnter',\n    animationsEnabled: boolean,\n    autoDownload: {\n      contacts: boolean\n      private: boolean\n      groups: boolean\n      channels: boolean\n    },\n    autoPlay: {\n      gifs: boolean,\n      videos: boolean\n    },\n    stickers: {\n      suggest: boolean,\n      loop: boolean\n    },\n    emoji: {\n      suggest: boolean,\n      big: boolean\n    },\n    background?: Background, // ! DEPRECATED\n    themes: Theme[],\n    theme: Theme['name'],\n    notifications: {\n      sound: boolean\n    },\n    nightTheme?: boolean, // ! DEPRECATED\n    timeFormat: 'h12' | 'h23'\n  },\n  keepSigned: boolean,\n  chatContextMenuHintWasShown: boolean,\n  stateId: number\n};\n\nexport const STATE_INIT: State = {\n  allDialogsLoaded: {},\n  pinnedOrders: {},\n  contactsList: [],\n  updates: {},\n  filters: {},\n  maxSeenMsgId: 0,\n  stateCreatedTime: Date.now(),\n  recentEmoji: [],\n  topPeersCache: {},\n  recentSearch: [],\n  version: STATE_VERSION,\n  build: BUILD,\n  authState: {\n    _: IS_MOBILE ? 'authStateSignIn' : 'authStateSignQr'\n  },\n  hiddenPinnedMessages: {},\n  settings: {\n    messagesTextSize: 16,\n    sendShortcut: 'enter',\n    animationsEnabled: true,\n    autoDownload: {\n      contacts: true,\n      private: true,\n      groups: true,\n      channels: true\n    },\n    autoPlay: {\n      gifs: true,\n      videos: true\n    },\n    stickers: {\n      suggest: true,\n      loop: true\n    },\n    emoji: {\n      suggest: true,\n      big: true\n    },\n    themes: [{\n      name: 'day',\n      background: {\n        type: 'image',\n        blur: false,\n        slug: 'ByxGo2lrMFAIAAAAmkJxZabh8eM', // * new blurred camomile,\n        highlightningColor: 'hsla(85.5319, 36.9171%, 40.402%, 0.4)'\n      }\n    }, {\n      name: 'night',\n      background: {\n        type: 'color',\n        blur: false,\n        color: '#0f0f0f',\n        highlightningColor: 'hsla(0, 0%, 3.82353%, 0.4)'\n      }\n    }],\n    theme: 'system',\n    notifications: {\n      sound: false\n    },\n    timeFormat: new Date().toLocaleString().match(/\\s(AM|PM)/) ? 'h12' : 'h23'\n  },\n  keepSigned: true,\n  chatContextMenuHintWasShown: false,\n  stateId: nextRandomUint(32)\n};\n\nconst ALL_KEYS = Object.keys(STATE_INIT) as any as Array<keyof State>;\n\nconst REFRESH_KEYS = ['contactsList', 'stateCreatedTime',\n  'maxSeenMsgId', 'filters', 'topPeers'] as any as Array<keyof State>;\n\nexport type StatePeerType = 'recentSearch' | 'topPeer' | 'dialog' | 'contact' | 'topMessage';\n\n//const REFRESH_KEYS_WEEK = ['dialogs', 'allDialogsLoaded', 'updates', 'pinnedOrders'] as any as Array<keyof State>;\n\nexport class AppStateManager extends EventListenerBase<{\n  save: (state: State) => Promise<void>,\n  peerNeeded: (peerId: PeerId) => void,\n  peerUnneeded: (peerId: PeerId) => void\n}> {\n  public static STATE_INIT = STATE_INIT;\n  private loaded: Promise<State>;\n  private log = logger('STATE'/* , LogLevels.error */);\n\n  private state: State;\n\n  private neededPeers: Map<PeerId, Set<string>> = new Map();\n  private singlePeerMap: Map<string, PeerId> = new Map();\n\n  public storages = {\n    users: new AppStorage<Record<UserId, User>, typeof DATABASE_STATE>(DATABASE_STATE, 'users'),\n    chats: new AppStorage<Record<ChatId, Chat>, typeof DATABASE_STATE>(DATABASE_STATE, 'chats'),\n    dialogs: new AppStorage<Record<PeerId, Dialog>, typeof DATABASE_STATE>(DATABASE_STATE, 'dialogs')\n  };\n\n  public storagesResults: {\n    users: User[],\n    chats: Chat[],\n    dialogs: Dialog[]\n  } = {} as any;\n\n  public storage = stateStorage;\n\n  public newVersion: string;\n\n  constructor() {\n    super();\n    this.loadSavedState();\n  }\n\n  public loadSavedState(): Promise<State> {\n    if(this.loaded) return this.loaded;\n    console.time('load state');\n    this.loaded = new Promise((resolve) => {\n      const storagesKeys = Object.keys(this.storages) as Array<keyof AppStateManager['storages']>;\n      const storagesPromises: Promise<any>[] = storagesKeys.map(key => this.storages[key].getAll());\n\n      const promises/* : Promise<any>[] */ = ALL_KEYS.map(key => stateStorage.get(key))\n      .concat(sessionStorage.get('user_auth'), sessionStorage.get('state_id'))\n      .concat(stateStorage.get('user_auth')) // support old webk format\n      .concat(storagesPromises);\n\n      Promise.all(promises).then(async(arr) => {\n        // await new Promise((resolve) => setTimeout(resolve, 3e3));\n        /* const self = this;\n        const skipHandleKeys = new Set(['isProxy', 'filters', 'drafts']);\n        const getHandler = (path?: string) => {\n          return {\n            get(target: any, key: any) {\n              if(key === 'isProxy') {\n                return true;\n              }\n\n              const prop = target[key];\n\n              if(prop !== undefined && !skipHandleKeys.has(key) && !prop.isProxy && typeof(prop) === 'object') {\n                target[key] = new Proxy(prop, getHandler(path || key));\n                return target[key];\n              }\n              \n              return prop;\n            },\n            set(target: any, key: any, value: any) {\n              console.log('Setting', target, `.${key} to equal`, value, path);\n          \n              target[key] = value;\n\n              // @ts-ignore\n              self.pushToState(path || key, path ? self.state[path] : value, false);\n\n              return true;\n            }\n          };\n        }; */\n\n        let state: State = this.state = {} as any;\n\n        // ! then can't store false values\n        for(let i = 0, length = ALL_KEYS.length; i < length; ++i) {\n          const key = ALL_KEYS[i];\n          const value = arr[i];\n          if(value !== undefined) {\n            // @ts-ignore\n            state[key] = value;\n          } else {\n            this.pushToState(key, copy(STATE_INIT[key]));\n          }\n        }\n\n        arr.splice(0, ALL_KEYS.length);\n\n        // * Read auth\n        let auth = arr.shift() as UserAuth | number;\n        const stateId = arr.shift() as number;\n        const shiftedWebKAuth = arr.shift() as UserAuth | number;\n        if(!auth && shiftedWebKAuth) { // support old webk auth\n          auth = shiftedWebKAuth;\n          const keys: string[] = ['dc', 'server_time_offset', 'xt_instance'];\n          for(let i = 1; i <= 5; ++i) {\n            keys.push(`dc${i}_server_salt`);\n            keys.push(`dc${i}_auth_key`);\n          }\n\n          const values = await Promise.all(keys.map(key => stateStorage.get(key as any)));\n          keys.push('user_auth');\n          values.push(typeof(auth) === 'number' || typeof(auth) === 'string' ? {dcID: values[0] || App.baseDcId, date: Date.now() / 1000 | 0, id: auth.toPeerId(false)} as UserAuth : auth);\n\n          let obj: any = {};\n          keys.forEach((key, idx) => {\n            obj[key] = values[idx];\n          });\n\n          await sessionStorage.set(obj);\n        }\n        \n        /* if(!auth) { // try to read Webogram's session from localStorage\n          try {\n            const keys = Object.keys(localStorage);\n            for(let i = 0; i < keys.length; ++i) {\n              const key = keys[i];\n              let value: any;\n              try {\n                value = localStorage.getItem(key);\n                value = JSON.parse(value);\n              } catch(err) {\n                //console.error(err);\n              }\n\n              sessionStorage.set({\n                [key as any]: value\n              });\n            }\n\n            auth = sessionStorage.getFromCache('user_auth');\n          } catch(err) {\n            this.log.error('localStorage import error', err);\n          }\n        } */\n\n        if(auth) {\n          // ! Warning ! DON'T delete this\n          state.authState = {_: 'authStateSignedIn'};\n          rootScope.dispatchEvent('user_auth', typeof(auth) === 'number' || typeof(auth) === 'string' ? \n            {dcID: 0, date: Date.now() / 1000 | 0, id: auth.toPeerId(false)} : \n            auth); // * support old version\n        }\n\n        // * Read storages\n        for(let i = 0, length = storagesKeys.length; i < length; ++i) {\n          this.storagesResults[storagesKeys[i]] = arr[i] as any;\n        }\n\n        arr.splice(0, storagesKeys.length);\n\n        if(state.stateId !== stateId) {\n          if(stateId !== undefined) {\n            const preserve: Map<keyof State, State[keyof State]> = new Map([\n              ['authState', undefined],\n              ['stateId', undefined]\n            ]);\n  \n            preserve.forEach((_, key) => {\n              preserve.set(key, copy(state[key]));\n            });\n  \n            state = this.state = copy(STATE_INIT);\n  \n            preserve.forEach((value, key) => {\n              // @ts-ignore\n              state[key] = value;\n            });\n\n            for(const key in this.storagesResults) {\n              this.storagesResults[key as keyof AppStateManager['storagesResults']].length = 0;\n            }\n\n            this.storage.set(state);\n          }\n\n          await sessionStorage.set({\n            state_id: state.stateId\n          });\n        }\n\n        const time = Date.now();\n        if((state.stateCreatedTime + REFRESH_EVERY) < time) {\n          if(DEBUG) {\n            this.log('will refresh state', state.stateCreatedTime, time);\n          }\n\n          const r = (keys: typeof REFRESH_KEYS) => {\n            keys.forEach(key => {\n              this.pushToState(key, copy(STATE_INIT[key]));\n  \n              // @ts-ignore\n              const s = this.storagesResults[key];\n              if(s && s.length) {\n                s.length = 0;\n              }\n            });\n          };\n          \n          r(REFRESH_KEYS);\n\n          /* if((state.stateCreatedTime + REFRESH_EVERY_WEEK) < time) {\n            if(DEBUG) {\n              this.log('will refresh updates');\n            }\n\n            r(REFRESH_KEYS_WEEK);\n          } */\n        }\n        \n        //state = this.state = new Proxy(state, getHandler());\n\n        // * support old version\n        if(!state.settings.hasOwnProperty('theme') && state.settings.hasOwnProperty('nightTheme')) {\n          state.settings.theme = state.settings.nightTheme ? 'night' : 'day';\n          this.pushToState('settings', state.settings);\n        }\n\n        // * support old version\n        if(!state.settings.hasOwnProperty('themes') && state.settings.background) {\n          state.settings.themes = copy(STATE_INIT.settings.themes);\n          const theme = state.settings.themes.find(t => t.name === state.settings.theme);\n          if(theme) {\n            theme.background = state.settings.background;\n            this.pushToState('settings', state.settings);\n          }\n        }\n\n        validateInitObject(STATE_INIT, state, (missingKey) => {\n          // @ts-ignore\n          this.pushToState(missingKey, state[missingKey]);\n        });\n\n        if(state.version !== STATE_VERSION || state.build !== BUILD/*  || true */) {\n          // reset filters and dialogs if version is older\n          if(compareVersion(state.version, '0.8.7') === -1) {\n            this.state.allDialogsLoaded = copy(STATE_INIT.allDialogsLoaded);\n            this.state.filters = copy(STATE_INIT.filters);\n            const result = this.storagesResults.dialogs;\n            if(result?.length) {\n              result.length = 0;\n            }\n          }\n          \n          if(compareVersion(state.version, STATE_VERSION) !== 0) {\n            this.newVersion = STATE_VERSION;\n          }\n\n          this.pushToState('version', STATE_VERSION);\n          this.pushToState('build', BUILD);\n        }\n\n        // ! probably there is better place for it\n        rootScope.settings = state.settings;\n\n        if(DEBUG) {\n          this.log('state res', state, copy(state));\n        }\n        \n        //return resolve();\n\n        console.timeEnd('load state');\n        resolve(state);\n      }).catch(resolve);\n    });\n\n    return this.loaded;\n  }\n\n  public getState() {\n    return this.state === undefined ? this.loadSavedState() : Promise.resolve(this.state);\n  }\n\n  public setByKey(key: string, value: any) {\n    setDeepProperty(this.state, key, value);\n    rootScope.dispatchEvent('settings_updated', {key, value});\n\n    const first = key.split('.')[0];\n    // @ts-ignore\n    this.pushToState(first, this.state[first]);\n  }\n\n  public pushToState<T extends keyof State>(key: T, value: State[T], direct = true) {\n    if(direct) {\n      this.state[key] = value;\n    }\n\n    this.setKeyValueToStorage(key, value);\n  }\n\n  public setKeyValueToStorage<T extends keyof State>(key: T, value: State[T] = this.state[key]) {\n    this.storage.set({\n      [key]: value\n    });\n  }\n\n  public requestPeer(peerId: PeerId, type: StatePeerType, limit?: number) {\n    let set = this.neededPeers.get(peerId);\n    if(set && set.has(type)) {\n      return;\n    }\n\n    if(!set) {\n      set = new Set();\n      this.neededPeers.set(peerId, set);\n    }\n\n    set.add(type);\n\n    this.dispatchEvent('peerNeeded', peerId);\n\n    if(limit !== undefined) {\n      this.keepPeerSingle(peerId, type);\n    }\n  }\n\n  public requestPeerSingle(peerId: PeerId, type: StatePeerType, keepPeerIdSingle: PeerId = peerId) {\n    return this.requestPeer(peerId, type + '_' + keepPeerIdSingle as any, 1);\n  }\n\n  public releaseSinglePeer(peerId: PeerId, type: StatePeerType) {\n    return this.keepPeerSingle(NULL_PEER_ID, type + '_' + peerId as any);\n  }\n\n  public isPeerNeeded(peerId: PeerId) {\n    return this.neededPeers.has(peerId);\n  }\n\n  public keepPeerSingle(peerId: PeerId, type: StatePeerType) {\n    const existsPeerId = this.singlePeerMap.get(type);\n    if(existsPeerId && existsPeerId !== peerId && this.neededPeers.has(existsPeerId)) {\n      const set = this.neededPeers.get(existsPeerId);\n      set.delete(type);\n\n      if(!set.size) {\n        this.neededPeers.delete(existsPeerId);\n        this.dispatchEvent('peerUnneeded', existsPeerId);\n      }\n    }\n\n    if(peerId) {\n      this.singlePeerMap.set(type, peerId);\n    } else {\n      this.singlePeerMap.delete(type);\n    }\n  }\n\n  /* public resetState() {\n    for(let i in this.state) {\n      // @ts-ignore\n      this.state[i] = false;\n    }\n    sessionStorage.set(this.state).then(() => {\n      location.reload();\n    });\n  } */\n}\n\n//console.trace('appStateManager include');\n\nconst appStateManager = new AppStateManager();\nMOUNT_CLASS_TO.appStateManager = appStateManager;\nexport default appStateManager;\n"],"sourceRoot":""}